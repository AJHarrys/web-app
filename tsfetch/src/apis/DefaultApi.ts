// tslint:disable
// eslint-disable
/**
 * CoopCare API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Client,
    ClientFromJSON,
    ClientToJSON,
    OmahaInterventionCategory,
    OmahaInterventionCategoryFromJSON,
    OmahaInterventionCategoryToJSON,
    OmahaInterventionTarget,
    OmahaInterventionTargetFromJSON,
    OmahaInterventionTargetToJSON,
    OmahaProblem,
    OmahaProblemFromJSON,
    OmahaProblemToJSON,
    OmahaProblemDomain,
    OmahaProblemDomainFromJSON,
    OmahaProblemDomainToJSON,
    OmahaSymptom,
    OmahaSymptomFromJSON,
    OmahaSymptomToJSON,
    ProblemClassification,
    ProblemClassificationFromJSON,
    ProblemClassificationToJSON,
} from '../models';

export interface AppGetClientProblemInterventionsRequest {
    clientid: number;
    problemid: number;
}

export interface AppGetClientProblemRatingsRequest {
    clientId: number;
    problemId: number;
}

export interface AppGetClientProblemsRequest {
    clientId: number;
}

export interface AppGetOmahaInterventionCategoriesRequest {
    lang?: AppGetOmahaInterventionCategoriesLangEnum;
}

export interface AppGetOmahaInterventionTargetsRequest {
    lang?: AppGetOmahaInterventionTargetsLangEnum;
}

export interface AppGetOmahaProblemDomainsRequest {
    lang?: AppGetOmahaProblemDomainsLangEnum;
}

export interface AppGetOmahaProblemsRequest {
    lang?: AppGetOmahaProblemsLangEnum;
}

export interface AppGetOmahaSymptomsRequest {
    lang?: AppGetOmahaSymptomsLangEnum;
}

export interface AppPostClientProblemsRequest {
    clientId: number;
    ProblemClassification?: ProblemClassification;
}

/**
 * no description
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * get interventions
     */
    async appGetClientProblemInterventionsRaw(requestParameters: AppGetClientProblemInterventionsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.clientid === null || requestParameters.clientid === undefined) {
            throw new runtime.RequiredError('clientid','Required parameter requestParameters.clientid was null or undefined when calling appGetClientProblemInterventions.');
        }

        if (requestParameters.problemid === null || requestParameters.problemid === undefined) {
            throw new runtime.RequiredError('problemid','Required parameter requestParameters.problemid was null or undefined when calling appGetClientProblemInterventions.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/client/{clientid}/problem/{problemid}/interventions`.replace(`{${"clientid"}}`, encodeURIComponent(String(requestParameters.clientid))).replace(`{${"problemid"}}`, encodeURIComponent(String(requestParameters.problemid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * get interventions
     */
    async appGetClientProblemInterventions(requestParameters: AppGetClientProblemInterventionsRequest): Promise<void> {
        await this.appGetClientProblemInterventionsRaw(requestParameters);
    }

    /**
     * Get problem ratings
     */
    async appGetClientProblemRatingsRaw(requestParameters: AppGetClientProblemRatingsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.clientId === null || requestParameters.clientId === undefined) {
            throw new runtime.RequiredError('clientId','Required parameter requestParameters.clientId was null or undefined when calling appGetClientProblemRatings.');
        }

        if (requestParameters.problemId === null || requestParameters.problemId === undefined) {
            throw new runtime.RequiredError('problemId','Required parameter requestParameters.problemId was null or undefined when calling appGetClientProblemRatings.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/client/{clientId}/problem/{problemId}/ratings`.replace(`{${"clientId"}}`, encodeURIComponent(String(requestParameters.clientId))).replace(`{${"problemId"}}`, encodeURIComponent(String(requestParameters.problemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get problem ratings
     */
    async appGetClientProblemRatings(requestParameters: AppGetClientProblemRatingsRequest): Promise<void> {
        await this.appGetClientProblemRatingsRaw(requestParameters);
    }

    /**
     * Get client\'s problems
     */
    async appGetClientProblemsRaw(requestParameters: AppGetClientProblemsRequest): Promise<runtime.ApiResponse<Array<ProblemClassification>>> {
        if (requestParameters.clientId === null || requestParameters.clientId === undefined) {
            throw new runtime.RequiredError('clientId','Required parameter requestParameters.clientId was null or undefined when calling appGetClientProblems.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/client/{clientId}/problems`.replace(`{${"clientId"}}`, encodeURIComponent(String(requestParameters.clientId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProblemClassificationFromJSON));
    }

    /**
     * Get client\'s problems
     */
    async appGetClientProblems(requestParameters: AppGetClientProblemsRequest): Promise<Array<ProblemClassification>> {
        const response = await this.appGetClientProblemsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get all clients
     */
    async appGetClientsRaw(): Promise<runtime.ApiResponse<Array<Client>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/clients`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClientFromJSON));
    }

    /**
     * Get all clients
     */
    async appGetClients(): Promise<Array<Client>> {
        const response = await this.appGetClientsRaw();
        return await response.value();
    }

    /**
     * Get Omaha intervention categories
     */
    async appGetOmahaInterventionCategoriesRaw(requestParameters: AppGetOmahaInterventionCategoriesRequest): Promise<runtime.ApiResponse<Array<OmahaInterventionCategory>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.lang !== undefined) {
            queryParameters['lang'] = requestParameters.lang;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/omaha/intervention_categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OmahaInterventionCategoryFromJSON));
    }

    /**
     * Get Omaha intervention categories
     */
    async appGetOmahaInterventionCategories(requestParameters: AppGetOmahaInterventionCategoriesRequest): Promise<Array<OmahaInterventionCategory>> {
        const response = await this.appGetOmahaInterventionCategoriesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get Omaha intervention targets
     */
    async appGetOmahaInterventionTargetsRaw(requestParameters: AppGetOmahaInterventionTargetsRequest): Promise<runtime.ApiResponse<Array<OmahaInterventionTarget>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.lang !== undefined) {
            queryParameters['lang'] = requestParameters.lang;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/omaha/intervention_targets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OmahaInterventionTargetFromJSON));
    }

    /**
     * Get Omaha intervention targets
     */
    async appGetOmahaInterventionTargets(requestParameters: AppGetOmahaInterventionTargetsRequest): Promise<Array<OmahaInterventionTarget>> {
        const response = await this.appGetOmahaInterventionTargetsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get Omaha problem domain catalog
     */
    async appGetOmahaProblemDomainsRaw(requestParameters: AppGetOmahaProblemDomainsRequest): Promise<runtime.ApiResponse<Array<OmahaProblemDomain>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.lang !== undefined) {
            queryParameters['lang'] = requestParameters.lang;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/omaha/problem_domains`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OmahaProblemDomainFromJSON));
    }

    /**
     * Get Omaha problem domain catalog
     */
    async appGetOmahaProblemDomains(requestParameters: AppGetOmahaProblemDomainsRequest): Promise<Array<OmahaProblemDomain>> {
        const response = await this.appGetOmahaProblemDomainsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get Omaha problem catalog
     */
    async appGetOmahaProblemsRaw(requestParameters: AppGetOmahaProblemsRequest): Promise<runtime.ApiResponse<Array<OmahaProblem>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.lang !== undefined) {
            queryParameters['lang'] = requestParameters.lang;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/omaha/problems`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OmahaProblemFromJSON));
    }

    /**
     * Get Omaha problem catalog
     */
    async appGetOmahaProblems(requestParameters: AppGetOmahaProblemsRequest): Promise<Array<OmahaProblem>> {
        const response = await this.appGetOmahaProblemsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get Omaha symptom catalog
     */
    async appGetOmahaSymptomsRaw(requestParameters: AppGetOmahaSymptomsRequest): Promise<runtime.ApiResponse<Array<OmahaSymptom>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.lang !== undefined) {
            queryParameters['lang'] = requestParameters.lang;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/omaha/symptoms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OmahaSymptomFromJSON));
    }

    /**
     * Get Omaha symptom catalog
     */
    async appGetOmahaSymptoms(requestParameters: AppGetOmahaSymptomsRequest): Promise<Array<OmahaSymptom>> {
        const response = await this.appGetOmahaSymptomsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new problem
     */
    async appPostClientProblemsRaw(requestParameters: AppPostClientProblemsRequest): Promise<runtime.ApiResponse<Array<ProblemClassification>>> {
        if (requestParameters.clientId === null || requestParameters.clientId === undefined) {
            throw new runtime.RequiredError('clientId','Required parameter requestParameters.clientId was null or undefined when calling appPostClientProblems.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/client/{clientId}/problems`.replace(`{${"clientId"}}`, encodeURIComponent(String(requestParameters.clientId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProblemClassificationToJSON(requestParameters.ProblemClassification),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProblemClassificationFromJSON));
    }

    /**
     * Create a new problem
     */
    async appPostClientProblems(requestParameters: AppPostClientProblemsRequest): Promise<Array<ProblemClassification>> {
        const response = await this.appPostClientProblemsRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum AppGetOmahaInterventionCategoriesLangEnum {
    EN = 'EN',
    DE = 'DE'
}
/**
    * @export
    * @enum {string}
    */
export enum AppGetOmahaInterventionTargetsLangEnum {
    EN = 'EN',
    DE = 'DE'
}
/**
    * @export
    * @enum {string}
    */
export enum AppGetOmahaProblemDomainsLangEnum {
    EN = 'EN',
    DE = 'DE'
}
/**
    * @export
    * @enum {string}
    */
export enum AppGetOmahaProblemsLangEnum {
    EN = 'EN',
    DE = 'DE'
}
/**
    * @export
    * @enum {string}
    */
export enum AppGetOmahaSymptomsLangEnum {
    EN = 'EN',
    DE = 'DE'
}
